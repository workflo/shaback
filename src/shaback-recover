#!/bin/bash

set -e

which dialog >/dev/null || (
	echo "'dialog' not installed!"
	which apt-get > /dev/null && echo -e "\nRun as root and try again:\n   apt-get install dialog"
	false
)

answer=$(tempfile 2>/dev/null) || answer=/tmp/test$$
trap "rm -f $answer" 0 1 2 5 15

SHABACK_REPO=${SHABACK_REPO:-$1}
CWD=${SHABACK_REPO:-`pwd`}
dest_dir=`pwd`
dest_dir=/tmp

BT="Shaback - recovery console"
step="selectRepo"


#
# Select the shaback repository
#
selectRepo () {
	while true; do
		if [ -z $SHABACK_REPO ]; then
			dialog --title "Select Shaback Repository" --backtitle "$BT" --dselect $CWD 22 76 2> $answer
			SHABACK_REPO=`cat $answer`
		fi

		if [ -z $SHABACK_REPO ]; then
			clear; echo "No Shaback Repository selected."; false
		fi

		if [ ! -f "$SHABACK_REPO/repo.properties" ]; then
			dialog --title "Shaback Repository" --backtitle "$BT" --msgbox "\n\nThis is not your Shaback Repository:\n\n$SHABACK_REPO" 10 76
			CWD=$SHABACK_REPO
			SHABACK_REPO=""
		else
			step="selectHost"
			break
		fi
	done
}


#
# Select host
#
selectHost () {
	declare -a hosts=(`find "$SHABACK_REPO/index" -type f -name '*.sroot' | sed -e 's/.*\/\([^\/]*\)[-_0-9]\{18\}\.sroot/\1/' | sort -u`)

	n=0
	_params=""

	for h in ${hosts[@]}; do
		_params="$_params $n $h"
		n=`expr $n + 1`
	done

	declare -a params=($_params)

	dialog --title "Shaback Recovery" --backtitle "$BT" --menu "Select Host to recover:" 22 76 15 ${params[@]} 2> $answer || (
		clear; echo "Cancelled."; false
	)

	host=${hosts[`cat $answer`]}
	step="selectVersion"
}



#
# Select backup set / version
#
selectVersion () {
	mode="B"

	declare -a versions=(`find "$SHABACK_REPO/index" -type f -name "${host}_*.sroot" | sort -r`)

	n=0
	_params=""

	for v in ${versions[@]}; do
		_params="$_params $n `basename  $v .sroot`"
		n=`expr $n + 1`
	done

	declare -a params=($_params)

	dialog --title "Shaback Recovery: ${host}" --backtitle "$BT" --menu "Select Backup to recover:" 22 76 15 ${params[@]} 2> $answer || (
		false
	) || step="selectHost"
	if [ $step == "selectHost" ]; then return; fi

	version=${versions[`cat $answer`]}
	step="selectMode"
}


#
# Select recovery mode
#
selectMode () {
	dialog --title "Shaback Recovery: ${host}" --backtitle "$BT" --menu "Select recovery mode" 14 50 3 C "Restore complete backup set" S "Select individual directory" 2> $answer || (
		false
	) || step="selectVersion"
	if [ $step == "selectVersion" ]; then return; fi

	mode=`cat $answer`

	if [ $mode == "C" ]; then
		id=`cat $version`
		step="selectDestination"
	fi
	if [ $mode == "S" ]; then
		id=""
		step="selectDirectory"
	fi
}


#
# Select destination directory
#
selectDestination () {
	dialog --title "Destination directory" --backtitle "$BT" --dselect $dest_dir 22 76 2> $answer || (
		false
	) || step="selectMode"
	if [ $step == "selectMode" ]; then return; fi	

	dest_dir=`cat $answer`
	step="confirmRecovery"
}


#
# Confirmation
#
confirmRecovery () {
	dialog --title "Shaback Recovery: ${host}" --backtitle "$BT" --yesno "Really recover backup file set\n\n    ${id}\n\nto\n\n    ${dest_dir}\n\n?" 13 76 || (
		false
	) || step="selectDestination"
	if [ $step == "selectDestination" ]; then return; fi

	step="recover"
}


#
# Start recovering
#
recover () {
	# Ggf. noch vorher nachfragen?
	mkdir -p $dest_dir

	cd $dest_dir
	shaback_error_log=`mktemp`
	trap "rm -f $shaback_error_log" 0 1 2 5 15

	shaback -r ${SHABACK_REPO} restore --gauge ${id} 2> $shaback_error_log |
		dialog --title "Shaback Recovery: ${host}" --backtitle "$BT" --gauge "Please wait" 9 76 0

	# wc -l $shaback_error_log == 0 ?
	dialog --title "Shaback Recovery finished" --backtitle "$BT" --tailbox $shaback_error_log 22 76

	clear

	echo "ID: ${id}"
	echo "dest_dir: ${dest_dir}"
}


#
# Main loop
#
while true; do
	#echo " Step: $step"
	case $step in
		"selectRepo" ) selectRepo ;;
		"selectHost" ) selectHost ;;
		"selectVersion" ) selectVersion ;;
		"selectMode" ) selectMode ;;
		"selectDestination" ) selectDestination ;;
		"confirmRecovery" ) confirmRecovery ;;
		"recover" ) recover ;;
		* ) exit
	esac
done
